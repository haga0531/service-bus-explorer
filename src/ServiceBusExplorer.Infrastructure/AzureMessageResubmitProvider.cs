using Azure.Messaging.ServiceBus;

namespace ServiceBusExplorer.Infrastructure;

public sealed class AzureMessageResubmitProvider(string connectionString) : IMessageResubmitProvider
{
    private readonly ServiceBusClient _client = new ServiceBusClient(connectionString);

    public async Task ResubmitMessageAsync(
        string queueOrTopic,
        string messageId,
        string? subscription = null,
        CancellationToken cancellationToken = default)
    {
        Console.WriteLine($"[AzureMessageResubmitProvider] ResubmitMessageAsync called: Queue={queueOrTopic}, MessageId={messageId}, Subscription={subscription}");
        
        ServiceBusReceiver? deadLetterReceiver = null;
        ServiceBusSender? sender = null;
        
        try
        {
            // Create receiver for dead letter queue
            if (string.IsNullOrEmpty(subscription))
            {
                deadLetterReceiver = _client.CreateReceiver(
                    queueOrTopic,
                    new ServiceBusReceiverOptions
                    {
                        SubQueue = SubQueue.DeadLetter,
                        ReceiveMode = ServiceBusReceiveMode.PeekLock
                    });
            }
            else
            {
                deadLetterReceiver = _client.CreateReceiver(
                    queueOrTopic,
                    subscription,
                    new ServiceBusReceiverOptions
                    {
                        SubQueue = SubQueue.DeadLetter,
                        ReceiveMode = ServiceBusReceiveMode.PeekLock
                    });
            }
            
            // Create sender for active queue
            sender = _client.CreateSender(queueOrTopic);
            
            // Try to find and receive the specific message from dead letter queue
            // We need to receive messages in batches and find the target message
            ServiceBusReceivedMessage? targetMessage = null;
            var maxAttempts = 10; // Limit attempts to avoid infinite loop
            var attempt = 0;
            
            while (targetMessage == null && attempt < maxAttempts)
            {
                attempt++;
                var messages = await deadLetterReceiver.ReceiveMessagesAsync(
                    maxMessages: 100,
                    maxWaitTime: TimeSpan.FromSeconds(2),
                    cancellationToken: cancellationToken);
                
                if (!messages.Any())
                {
                    break;
                }

                foreach (var msg in messages)
                {
                    Console.WriteLine($"[AzureMessageResubmitProvider] Checking message: ID={msg.MessageId}, SequenceNumber={msg.SequenceNumber}");
                    
                    if (msg.MessageId == messageId)
                    {
                        Console.WriteLine($"[AzureMessageResubmitProvider] Found target message!");
                        targetMessage = msg;
                        // Complete all other messages by abandoning them
                        foreach (var otherMsg in messages.Where(m => m.MessageId != messageId))
                        {
                            await deadLetterReceiver.AbandonMessageAsync(otherMsg, cancellationToken: cancellationToken);
                        }
                        break;
                    }
                }
                
                // If we didn't find the target message, abandon all messages
                if (targetMessage == null)
                {
                    foreach (var msg in messages)
                    {
                        await deadLetterReceiver.AbandonMessageAsync(msg, cancellationToken: cancellationToken);
                    }
                }
            }
            
            if (targetMessage == null)
            {
                throw new InvalidOperationException($"Message with ID '{messageId}' not found in dead letter queue after {attempt} attempts");
            }
            
            // Create a new message from the received message
            // This constructor copies all properties from the original message
            var newMessage = new Azure.Messaging.ServiceBus.ServiceBusMessage(targetMessage);
            
            // Note: The MessageId will be regenerated by Service Bus when sending
            // This is a limitation of Azure Service Bus - we cannot preserve the original MessageId
            Console.WriteLine($"[AzureMessageResubmitProvider] Original MessageId: {targetMessage.MessageId}");
            Console.WriteLine($"[AzureMessageResubmitProvider] Note: A new MessageId will be assigned upon sending");
            
            // Add tracking properties to help identify this was resubmitted
            newMessage.ApplicationProperties["OriginalMessageId"] = targetMessage.MessageId;
            newMessage.ApplicationProperties["ResubmittedFromDeadLetter"] = true;
            newMessage.ApplicationProperties["ResubmittedAt"] = DateTimeOffset.UtcNow.ToString("O");
            newMessage.ApplicationProperties["OriginalDeadLetterReason"] = targetMessage.DeadLetterReason ?? "Unknown";
            newMessage.ApplicationProperties["OriginalDeadLetterErrorDescription"] = targetMessage.DeadLetterErrorDescription ?? "Unknown";
            
            // Send the message to the active queue
            await sender.SendMessageAsync(newMessage, cancellationToken);
            
            // Complete (remove) the message from dead letter queue
            await deadLetterReceiver.CompleteMessageAsync(targetMessage, cancellationToken);
        }
        finally
        {
            if (deadLetterReceiver != null)
            {
                await deadLetterReceiver.DisposeAsync();
            }
            if (sender != null)
            {
                await sender.DisposeAsync();
            }
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        await _client.DisposeAsync();
    }
}
